/*
Автор: Колесник А.С.
e-mail: kolesnik.dev@yandex.ru

Задача №1. Написать программу для копирования массива

Приложение позволяет выполнять копию одного массива в другой.
*** В рамках выполнения данного задания условимся, что 
    пользователь при использовании данного кода во всех случаях вводит
	валидные данные

Например, при вызове функции копирования, в качестве параметра - 
"количество копируемых элементов" не может быть указано число
большее, чем размер массива-источника.

При необходимости обработки всевозможных исключительных ситуаций,
прошу дать обратную связь для доработки.
*/
#include <iostream>

#define u32 int

#define ARR_LEN		10
#define ERROR_CODE	-1
#define SUCCESS_CODE 0

using namespace std;

/*
Функция выполняет копию элементов одного массива в другой.
Операция копирования выполняется с использованием функции
стандартной библиотеки языка C memcpy(...).

arr_src - массив-источник (копию элементов которого необходимо выполнить)
arr_dst - массив-получатель (куда необходимо выполнить копию)
cpy_len - количество элементов для копии

Использование шаблонов объясняется необходимостью работы
с массивами разных типов.

T - тип элементов, содержащихся в контейнере(массиве)
*/

template<typename T>
void 
copyArr(T *pArrSrc, T *pArrDst, u32 u32CpyLen)
{
	memcpy(pArrDst, pArrSrc, u32CpyLen*sizeof(T));
}

/*
Функция выполняет выделение памяти в куче.
В данном случае используется с целью выделения
памяти для массива, в который необходимо осуществить 
копию элементов.
*/

template<typename T>
void 
allocMem(T** pArr, u32 u32Len)
{
	*pArr = new(nothrow) T[u32Len * sizeof(T)];
}

/*
Функция выполняет печать содержимого массива в консоль.
Количество элементов для печати задается параметром u32Len
*/

template<typename T>
void
printArr(T* pArr, u32 u32Len)
{
	u32 u32SaveLen = u32Len;
	
	while (u32Len > 0) 
	{
		cout << pArr[u32SaveLen - u32Len] << " ";
		u32Len--;
	}
}

u32 main()
{
	// Массив оригинальных значений.
	// Значения в массив добавляются вручную
	// только лишь для упрощения процесса
	// демонстрации работы кода.
	u32 arrOrig[ARR_LEN] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};

	// Указатель на участок памяти, где 
	// будет размещена копия arrOrig
	u32* arrCopy = nullptr;
	
	// Выделение памяти для копии
	allocMem(&arrCopy, ARR_LEN);

	if (arrCopy == nullptr) {
		cout << "Memory allocation error" << endl;
		return ERROR_CODE;
	}

	copyArr(arrOrig, arrCopy, ARR_LEN);

	printArr(arrOrig, ARR_LEN);

	return SUCCESS_CODE;
}