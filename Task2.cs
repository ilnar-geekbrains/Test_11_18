using System;


//**Задача №2 с элементами математики.** Написать программу для операции "произведение массивов". \
//Сама операция определяется так, как будто элементы массива - это коэффициенты полинома.
//Соответственно, произведение массивов - должно дать новый массив, коэффициенты которого соответсвуют нужному полиному.
//
//Например, возьмем полином (x - 1) и полином(x + 2). Их можно представить в виде массивов [-1, 1] и[2, 1] соответственно.
//Индекс элемента в массиве соответствует степени x при этом коээфициенте, т.е. полином (x - 1) можно переписать как (-1 * x^0 + 1 * x^1),
//таким образом соответсвующий этому полиному массив будет иметь вид [-1, 1].
//
//По указанному правилу произведение массивов [-1, 1] и[2, 1] должно быть равно [-2, 1, 1], т.к. (x - 1) * (x + 2) = (x ^ 2 + x ^ 1 - 2).


/// <summary>
/// Класс содержит коэффициенты полинома(целые), конструктор и 
/// переоприделение оператора умножения для полиномов
/// Так как задача стандартная, то при решении просто подобрал самое красивое
/// https://ru.stackoverflow.com/questions/757906/Умножение-многочленов
/// Правда пришлось добавить переоприделение для метода ToString(), авторы про это забыли
/// </summary>
public class PolynomGBVersion
{

	//=====================================================================================================================
	//                                     Провекрка в консольном приложении
	//=====================================================================================================================
	//
	//	var p1 = new Polynom(1, 2, 3);
	//	var p2 = new Polynom(2, 3, 4);
	//	var p3 = p1 * p2;
	//	Console.WriteLine(p1);
	//  Console.WriteLine(p2);
	//  Console.WriteLine(p3);	
	//
	//=====================================================================================================================

	/// <summary>
	/// Коэффициенты полинома(Целые)
	/// </summary>
	public int[] coefficientsInteger;

	//Конструктор класса
	public PolynomGBVersion(params int[] coefficientsInteger)
	{
		//Передаем в класс целые коэффициенты полинома
		this.coefficientsInteger = coefficientsInteger;
	}


	/// <summary>
	/// Переоприделение оператора умножения для класса PolynomGBVersion
	/// </summary>
	/// <param name="polynom1">Полином слева</param>
	/// <param name="polynom2">Полином справа</param>
	/// <returns>Полином полученный от умножения полинома №1 на полином №2</returns>
	public static PolynomGBVersion operator *(PolynomGBVersion polynom1, PolynomGBVersion polynom2)
	{
		//Согласно правилу перемножения полиномов, количество коэффициентов нового полинома равна сумме количества коэффициентов полиномов произведения -1
		int[] coeffs = new int[polynom1.coefficientsInteger.Length + polynom2.coefficientsInteger.Length - 1];

		//Проходим по всем коэффициентам первого полинома
		for (int i = 0; i < polynom1.coefficientsInteger.Length; ++i)
			//Для каждого коэффициента первого полинома заполняем массив аккамулируя произведения коэффициентов одноименной степени
			for (int j = 0; j < polynom2.coefficientsInteger.Length; ++j)
				//Перемножение коэффициентов полиномов
				coeffs[i + j] += polynom1.coefficientsInteger[i] * polynom2.coefficientsInteger[j];
		//Создаем новый экземпляр класса PolynomGBVersion и передаем в него коэффициенты полученые при перемножении порождающих полиномов 
		return new PolynomGBVersion(coeffs);
	}


	/// <summary>
	/// Переопределение метода ToString() для класса PolynomGBVersion
	/// Пришлось написать самому, так как авторы в статье забыли про это упомянуть
	/// </summary>
	/// <returns>Полином в строковом виде</returns>
	public override string ToString()
	{
		//Пустая строчка
		string outLine = string.Empty;

		//Формируем все элементы с x начиная со старшего
		for (int i = coefficientsInteger.Length - 1; i > 0; i--)
		{
			//Если коэффициент =1, то 1 рисовать не будем(так не принято)
			if (coefficientsInteger[i] != 1)
			{
				//Коэффициент не 1, то рисуем его
				outLine = outLine + coefficientsInteger[i] + "x^" + i + "+";
			}
			else
			{
				//Коэффициент 1, не рисуем 1
				outLine = outLine + "x^" + i + "+";
			}
		}

		//Не забываем в конце добавить коэффициент без x
		outLine = outLine + coefficientsInteger[0];

		//Чистим от "+-" и "-1x"
		outLine = outLine.Replace("+-", "-");
		outLine = outLine.Replace("-1x", "-x");

		//Результат полином в виде строчки
		return outLine;
	}


}
